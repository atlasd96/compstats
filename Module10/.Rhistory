xlab=TeX('$\\theta$'), ylab=TeX('$s_p(\\theta)$'))
abline(v=bisection(20, 35, s_p_prime, tol=.000001))
newtons <- function(xt, fprime, f2prime, n=1, tol=0.01){
# Define the updating equation
xt_update <- xt - (fprime(xt) / f2prime(xt))
# If the adjustment value is less than the tolerance, end the iterations
if(abs(xt_update - xt) < tol){
print(paste0("The solution is ", round(xt_update, 3) , " and it was found in ", n, " iterations."))
return(xt_update)
}else{
# If not, call the recursive formula again
return(newtons(xt_update, fprime, f2prime, n=n+1, tol=tol))
}
}
fprime <- function(x){
return(-x^3 + x -1)
}
f2prime <- function(x){
return(-3 * x ^ 2 + 1)
}
x0 <- -1
solution <- newtons(x0, fprime, f2prime)
x0 <- 2
solution <- newtons(x0, fprime, f2prime)
X <- c(1.77, -.23, 2.76, 3.80, 3.47, 56.75, -1.34, 4.24,
-2.44, 3.29, 3.71, -2.40, 4.53, -.07, -1.05, -13.87,
-2.53, -1.75, .27, 43.21)
log_likelihood <- function(theta, x){
return (sum(dcauchy(x, location=theta, scale=1, log=TRUE)))
}
# Create a space for theta
theta_space <- seq(-50, 100, .25)
# Create the function results for theta
theta_f <- sapply(theta_space, function(theta){log_likelihood(theta, X)})
# Plot the likelihood function of theta
plot(theta_space, theta_f, 'l',
main=TeX('Log-likelihood of Cauchy($\\theta$, 1)' ),
xlab=TeX('$\\theta$'), ylab='Log-likelihood')
newtons <- function(xt, fprime, f2prime, tol=0.01){
# Define the updating equation
n <- 0
xt_update <- xt + 100
# While not below the tolerance level, continue updates
while(abs(fprime(xt)) > tol){
xt <- ifelse(n == 0, xt, xt_update)
# Define the updating equation
xt_update <- xt - (fprime(xt) / f2prime(xt))
n <- n + 1
}
# If the adjustment value is less than the tolerance, end the iterations
print(paste0("The solution is ", round(xt_update, 3) , " and it was found in ", n, " iterations."))
return(xt_update)
}
# Define the first derivative
fprime <- function(theta) sum(2 * (X - theta) / (1 + (X - theta) ^ 2))
# Define the second derivative
f2prime <- function(theta){
return(2 * sum (((X - theta) ^ 2 - 1) / (1 + (X - theta) ^ 2 ) ^ 2))
}
# Define the strating point, including mean and median
starting_points <- c(-11, -1, 0, 1.5, 4, 4.7, 7, 8, 38, mean(X), median(X))
# Call over all the starting points
solutions <- sapply(starting_points, function(x0){
print(paste0("Starting Point: ", x0))
newtons(x0, fprime=fprime, f2prime=f2prime, tol=.0001)
})
# Plot the likelihood function
theta_space <- seq(-50, 50, .25)
theta_f <- sapply(theta_space, function(theta){log_likelihood(theta, X)})
plot(theta_space, theta_f, 'l',
main=TeX('Log-likelihood of Cauchy($\\theta$, 1)' ),
xlab=TeX('$\\theta$'), ylab='Log-likelihood')
# Add in all solutions found
abline(v=solutions, col='red', lty=2, lwd=.5)
plot(theta_space, sapply(theta_space, fprime), 'l',
main=TeX('$l^{\\prime}(\\theta)$'),
xlab=TeX('$\\theta$'), ylab=TeX("$l^{\\prime}(\\theta)$")
)
bisection <- function(a, b, f_prime, tol=.0001, n=0){
# Define the new split point
x_t <- .5 * (a + b)
# Use conditioning to get the next interval
if(f_prime(a) * f_prime(x_t) <= 0){
new_interval <- c(a, x_t)
}else{
new_interval <- c(x_t, b)
}
# if interval is less than the tolerance, stop the recursion.
if ((b - a) < tol){
print(paste0("The solution is ", round(x_t, 3) , " and it was found in ", n, " iterations."))
return(x_t)
}else{
# If not, call again on the new interval
return(bisection(new_interval[1], new_interval[2], f_prime, n=n + 1))
}
}
# Define the observed values
X <- c(1.77, -.23, 2.76, 3.80, 3.47, 56.75, -1.34, 4.24,
-2.44, 3.29, 3.71, -2.40, 4.53, -.07, -1.05,
-13.87, -2.53, -1.75, .27, 43.21)
# Define the derivative of the function
fprime <- function(theta) sum(2 * (X - theta) / (1 + (X - theta) ^ 2))
# Create the likelihood function over the space
theta_space <- seq(-2, 2, .01)
theta_f <- sapply(theta_space, function(theta){log_likelihood(theta, X)})
# Assign starting interval
a <- -1; b <- 1;
# Solve over that interval
solutions <- bisection(a, b, function(theta) fprime(theta), tol=.00001)
# Plot the likelihood function
plot(theta_space, theta_f, 'l',
main=TeX('Log-likelihood of Cauchy($\\theta$, 1)' ),
xlab=TeX('$\\theta$'), ylab='Log-likelihood')
# ADd the interval lines in black
abline(v=c(a, b), col='red')
# Add the solution lines in red
abline(v=solutions, col='red', lty=2)
fprime <- function(theta) sum(2 * (X - theta) / (1 + (X - theta) ^ 2))
theta_space <- seq(-100, 100, .1)
theta_f <- sapply(theta_space, function(theta){log_likelihood(theta, X)})
plot(theta_space, theta_f, 'l',
main=TeX('Log-likelihood of Cauchy($\\theta$, 1)'),
xlab=TeX('$\\theta$'), ylab='Log-likelihood')
# Iterate over the list of intervals
holder <- lapply(list(
interval2 = c(-10, 10, 'green'),
interval3 = c(-100, 100, 'blue'),
interval4 = c(20, 80, 'gray')
),
# Create a function to plot the results of the intervals
function(interval){
# Define the interval
a <- as.numeric(interval[1]); b <- as.numeric(interval[2]);
# Solve the problem
solutions <- bisection(a, b, function(theta) fprime(theta), tol=.00001)
# Add thin solid lines for interval bounds
abline(v=c(a, b), col=interval[3])
# Add thick dashed lines for solution
abline(v=solutions, col=interval[3], lty=2, lwd=2)})
fixed_point_iteration <- function(x0, fprime, alpha=1, max_iter=100000, tol=.001){
starting_point <- x0
n <- 0
xt <- x0
while((n < 1 & n < max_iter) | abs(x0 - xt) > tol){
# Update the point
x0 <- xt
# Define update equation
xt <- x0 + (alpha * fprime(x0))
n <- n + 1
}
print(paste0("The solution is: ", round(xt, 3), ". The algorithm converged in ", n, " iterations with starting point = ", starting_point, " and alpha = ", alpha))
return(list(xt=xt,  n=n, starting_point=starting_point, alpha=alpha))
}
# Define the derivative of the function to optimize.
fprime <- function(theta) sum(2 * (X - theta) / (1 + (X - theta) ^ 2))
# start with x0 = -1.
results <- sapply(c(1, .64, .25), function(alpha){
fixed_point_iteration(-1, fprime=fprime, alpha=alpha)
})
results <- sapply(seq(-10, 10, 2), function(x0){
return(sapply(seq(.1, 1, .1), function(alpha){
fixed_point_iteration(-1, fprime=fprime, alpha=alpha, max_iter=1000)
}))
})
results <- sapply(seq(-10, 10, 2), function(x0){
return(sapply(seq(.1, .6, .1), function(alpha){
fixed_point_iteration(-1, fprime=fprime, alpha=alpha, max_iter=1000)
}))
})
results
results <- sapply(seq(-10, 10, 2), function(x0){
return(sapply(seq(.1, .7, .1), function(alpha){
fixed_point_iteration(-1, fprime=fprime, alpha=alpha, max_iter=1000)
}))
})
results <- sapply(seq(-10, 10, 2), function(x0){
return(sapply(seq(.1, .7, .1), function(alpha){
fixed_point_iteration(-1, fprime=fprime, alpha=alpha, max_iter=100)
}))
})
results <- sapply(seq(-10, 10, 2), function(x0){
return(sapply(seq(.1, .7, .1), function(alpha){
fixed_point_iteration(x0, fprime=fprime, alpha=alpha, max_iter=100)
}))
})
results <- sapply(seq(-10, 10, 2), function(x0){
return(sapply(seq(.1, .7, .1), function(alpha){
fixed_point_iteration(x0, fprime=fprime, alpha=alpha, max_iter=100)
}))
})
results <- sapply(seq(-10, 10, 2), function(x0){
return(sapply(seq(.1, .7, .1), function(alpha){
fixed_point_iteration(x0, fprime=fprime, alpha=alpha, max_iter=100)
}))
})
results <- sapply(seq(-10, 10, 2), function(x0){
return(sapply(c(.1, .3, .8, 1), function(alpha){
fixed_point_iteration(x0, fprime=fprime, alpha=alpha, max_iter=100)
}))
})
fixed_point_iteration <- function(x0, fprime, alpha=1, max_iter=100000, tol=.001){
starting_point <- x0
n <- 0
xt <- x0
while((n < 1 | abs(x0 - xt) > tol) & n < max_iter){
# Update the point
x0 <- xt
# Define update equation
xt <- x0 + (alpha * fprime(x0))
n <- n + 1
}
print(paste0("The solution is: ", round(xt, 3), ". The algorithm converged in ", n, " iterations with starting point = ", starting_point, " and alpha = ", alpha))
return(list(xt=xt,  n=n, starting_point=starting_point, alpha=alpha))
}
# Define the derivative of the function to optimize.
fprime <- function(theta) sum(2 * (X - theta) / (1 + (X - theta) ^ 2))
# start with x0 = -1.
results <- sapply(c(1, .64, .25), function(alpha){
fixed_point_iteration(-1, fprime=fprime, alpha=alpha)
})
results <- sapply(seq(-10, 10, 2), function(x0){
return(sapply(c(.1, .3, .8,), function(alpha){
fixed_point_iteration(x0, fprime=fprime, alpha=alpha, max_iter=100)
}))
})
results <- sapply(seq(-10, 10, 2), function(x0){
return(sapply(c(.1, .3, .8, 1), function(alpha){
fixed_point_iteration(x0, fprime=fprime, alpha=alpha, max_iter=100)
}))
})
results
results <- sapply(seq(-10, 10, 2), function(x0){
return(sapply(c(.1, .3, .8, 1), function(alpha){
fixed_point_iteration(x0, fprime=fprime, alpha=alpha, max_iter=10000)
}))
})
results
results <- sapply(seq(-10, 10, 2), function(x0){
return(sapply(c(.1, .3, .8, 1), function(alpha){
fixed_point_iteration(x0, fprime=fprime, alpha=alpha, max_iter=100000)
}))
})
results
results
results[1, ]
results
results[1, 1,]
results[1, 1]
results[1, 2]
results[1, 3]
results[[1]]
dim(results)
results
results <- sapply(c(-10, -5, -1, 1, 5, 10), function(x0){
return(sapply(c(.1, .3, .8, 1), function(alpha){
fixed_point_iteration(x0, fprime=fprime, alpha=alpha, max_iter=100000)
}))
})
fixed_point_iteration <- function(x0, fprime, alpha=1, max_iter=100000, tol=.001){
starting_point <- x0
n <- 0
xt <- x0
while((n < 1 | abs(x0 - xt) > tol) & n < max_iter){
# Update the point
x0 <- xt
# Define update equation
xt <- x0 + (alpha * fprime(x0))
n <- n + 1
}
print(paste0("The solution is: ", round(xt, 3), ". The algorithm converged in ", n, " iterations with starting point = ", starting_point, " and alpha = ", alpha))
return(c(xt=xt,  n=n, starting_point=starting_point, alpha=alpha))
}
# Define the derivative of the function to optimize.
fprime <- function(theta) sum(2 * (X - theta) / (1 + (X - theta) ^ 2))
# start with x0 = -1.
results <- sapply(c(1, .64, .25), function(alpha){
fixed_point_iteration(-1, fprime=fprime, alpha=alpha)
})
results <- sapply(c(-10, -5, -1, 1, 5, 10), function(x0){
return(sapply(c(.1, .3, .8, 1), function(alpha){
fixed_point_iteration(x0, fprime=fprime, alpha=alpha, max_iter=100000)
}))
})
results
class(results)
results[1, 1]
results[1, 2]
results[2, 1]
results
X <- seq(-1, 1, .1)
plot(X, (3/2) X^2)
plot(X, (3/2) * X^2)
-.8^(1/3)
runif(1000)
U <- runif(1000)
f <- function(x) (2*x - 1)^(1/3)
f(U)
f <- function(x) (2*x - 1)^(1/3)
U
f <- function(x) (2*x - 1)^(1/3)
f(U)
f(U)
f(U)
plot(U, f(U))
U <- runif(1000, 0, 1)
plot(U, f(U))
-.928 ^ 3
plot(U, hist(f(U)))
f
runif(1000, -1, 1)
U ,_ runif(1000, -1, 1)
U <-  runif(1000, -1, 1)
2 * cos(U) * U^2
mean(2 * cos(U) * U^2)
U <-  runif(10000, -1, 1)
mean(2 * cos(U) * U^2)
U <-  runif(10000, -1, 1)
U <-  runif(1000000, -1, 1)
mean(2 * cos(U) * U^2)
plot(U, .5 * exp(U))
U <-  runif(10000, -1, 1)
U <-  runif(10000, -5, 5)
plot(U, .5 * exp(U))
plot(U, .5 * exp(-1 * abs(U)))
plot(dnorm(U))
plot(U, .5 * exp(-1 * abs(U)))
plot(U, .5 * exp(-1 * abs(U)))
plot(pnorm(U))
plot(rnorm(U))
plot(rnorm(n=1000))
plot(U, dnorm(U))
lines(U, .5 * exp(-abs(U)))
plot(U, dnorm(U))
plot(U, .5 * exp(-abs(U)), add=TRUE)
curve(U, .5 * exp(-abs(U)))
curve(function(x) .5 * exp(-abs(x)), -5, 5)
plot(function(x) .5 * exp(-abs(x)), -5, 5, add=T)
plot(function(x) dnorm(x), -5, 5, add=T)
plot(function(x) 1 * exp(-abs(x)), -5, 5, add=T)
plot(function(x) .75 * exp(-abs(x)), -5, 5, add=T)
plot(function(x) .75 * exp(-abs(x)), -5, 5)
plot(function(x) dnorm(x), -5, 5, add=T)
.25 + .25 + (1/8)
.25 + .25 + (1/8) + (2.25 / 4)
(3/8) + (2.25 / 4)
(3/8) + (2.5 / 4)
factorial(10) + factorial(5)
factorial(10) + factorial(5)  ==  factorial(15)
factorial(10) * factorial(5)  ==  factorial(15)
factorial(10) * factorial(5)  ==  factorial(50)
factorial(10) * factorial(5)
factorial(3) * factorial()
factorial(3) * factorial(2)
factorial(3) * factorial(3)
knitr::opts_chunk$set(echo = TRUE)
library(gtools)
install.packages("gtools")
library(gtools)
permutations(n=length(survival.b))
knitr::opts_chunk$set(echo = TRUE)
get_bootstraps <- function(data, T, n){
return(sapply(seq(1, n), function(i) T(sample(data, length(data), replace=TRUE))))
}
get_studentized_percentile <- function(data, alpha){
return(quantile((data - mean(data)) / sd(data), alpha))
}
set.seed(73)
survival.s <- log(c(25, 42, 45, 46, 51, 103, 124, 146, 340, 396, 412, 876, 1112))
n <- 10000
alpha <- .05
bootstraps.s <- get_bootstraps(survival.s, mean, n)
stdev.s <- sd(bootstraps.s)
lwr <- mean(bootstraps.s) - (stdev.s * get_studentized_percentile(bootstraps.s, 1 - (alpha / 2)))
upr <- mean(bootstraps.s) - (stdev.s * get_studentized_percentile(bootstraps.s, (alpha / 2)))
hist(bootstraps.s, main="Stomach Cancer - Log Survival Days", xlab="Log Survival Days")
abline(v=lwr, col='green')
abline(v=upr, col='green')
permutations(n=length(survival.s), c=c(0, 1))
permutations(n=length(survival.s), x=c(0, 1))
permutations(r=length(survival.s), v=c(0, 1))
permutations(r=length(survival.s), v=c(0, 1), n=100)
permutations(r=length(survival.s), v=c(0, 1), n=1)
permutations(r=length(survival.s), v=c(0, 1), n=2)
permutations(r=length(survival.s), v=c(0, 1), n=5)
permutations(r=length(survival.s), v=c(0, 1), n=4)
permutations(r=length(survival.s), v=c(0, 1), n=3)
permutations(r=length(survival.s), v=c("0", "1"), n=3)
permutations(r=length(survival.s), v=c("0", "1"), n=3, repeats.allowed = T)
permutations(r=length(survival.s), v=c("0", "1"), n=3, repeats.allowed = T)
?permutations
permutations(n=10, r=2)
permutations(n=2, r=2)
permutations(n=2, r=3)
permutations(n=2, r=5)
permutations(n=2, r=5, repeats.allowed = T)
permutations(n=2, r=length(survival.s), repeats.allowed = T)
rep(survival.s, 10)
matrix(survival.s, nrow(all.options))
all.options <- permutations(n=2, r=length(survival.s), repeats.allowed = T)
matrix(survival.s, nrow(all.options))
sapply(seq(1, 10), function(i) survival.s)
t(sapply(seq(1, 10), function(i) survival.s))
matrix.s <- t(sapply(seq_along(all.options), function(i) survival.s))
matrix.s
matrix.s[all.options == 1]
matrix.s
matrix.s <- data.frame(t(sapply(seq_along(all.options), function(i) survival.s)))
matrix.s <- data.frame(t(sapply(seq_along(all.options), function(i) survival.s)))
matrix.b <- data.frame(t(sapply(seq_along(all.options), function(i) survival.b)))
set.seed(73)
survival.b <- log(c(24, 40, 719, 727, 791, 1166, 1235, 1581, 1804, 3460, 3808))
# Find the CI for
n <- 10000
alpha <- .05
bootstraps.b <- get_bootstraps(survival.b, mean, n)
stdev.b <- sd(bootstraps.b)
lwr <- mean(bootstraps.b) - (stdev.b * get_studentized_percentile(bootstraps.b, 1 - (alpha / 2)))
upr <- mean(bootstraps.b) - (stdev.b * get_studentized_percentile(bootstraps.b, (alpha / 2)))
hist(bootstraps.b, main="Breast Cancer - Log Survival Days", xlab="Log Survival Days")
abline(v=lwr, col='green')
abline(v=upr, col='green')
library(gtools)
all.options <- permutations(n=2, r=length(survival.s), repeats.allowed = T)
matrix.s <- data.frame(t(sapply(seq_along(all.options), function(i) survival.s)))
matrix.b <- data.frame(t(sapply(seq_along(all.options), function(i) survival.b)))
matrix.s
matrix.s[all.options == 1]
matrix.s[[all.options == 1]]
all.options <- permutations(n=2, r=length(survival.s), repeats.allowed = T)
matrix.s <- data.frame(t(lapply(seq_along(all.options), function(i) survival.s)))
matrix.s <- data.frame(t(lapply(seq_along(all.options), function(i) survival.s)))
matrix.b <- data.frame(t(lapply(seq_along(all.options), function(i) survival.b)))
matrix.s <- lapply(seq_along(all.options), function(i) survival.s))
matrix.s <- lapply(seq_along(all.options), function(i) survival.s)
matrix.b <- lapply(seq_along(all.options), function(i) survival.b)
matrix.s
matrix.s[[q]]
matrix.s[[1]]
matrix.s[[q]][all.options[1, ] == 1]
all.options[1, ] == 1
matrix.b[[1] [all.options[1, ] == 1]
matrix.b[1] [all.options[1, ] == 1]
matrix.b[[1]] [all.options[1, ] == 1]
expand.grid(survival.b, survival.s)
outer(survival.b, survival.s)
survival.b
survival.s
sample(c(survival.b, survival.s), size = length(survival.b), replace=F)
sample(c(survival.b, survival.s), size = length(survival.b), replace=F)
sample(c(survival.b, survival.s), size = length(survival.b), replace=F)
library(permn)
install.packages("permn")
library(permn)
install.packages("combinat")
seq(1, length(survival.b))
permutations(seq(1, length(survival.b)))
permn(seq(1, length(survival.b)))
combinat::permn(seq(1, length(survival.b)))
pos <- combinat::permn(seq(1, length(survival.b)))
permutations(n=length(survival.b), r=2)
lapply(seq(1, length(survival.b)), function(i) permutations(n=length(survival.b), r=i)
)
lapply(seq(1, length(survival.b)), function(i) permutations(n=length(survival.b), r=i))
perms <- lapply(seq(1, length(survival.b)), function(i) permutations(n=length(survival.b), r=i))
factorial(11)
perms <- lapply(seq(1, length(survival.b)), function(i) combinations(n=length(survival.b), r=i))
perms
combs <- lapply(seq(1, length(survival.b)), function(i) combinations(n=length(survival.b), r=i))
lapply(combs), function(comb){
apply(combs, 1, function(row.comb) survival.b[row.comb])
})
?apply
lapply(combs, function(comb){
apply(combs, 1, function(row.comb) survival.b[row.comb])
})
apply(combs, 1, function(row.comb) row.comb)
lapply(combs, function(comb){
apply(combs, 1, function(row.comb) row.comb)
})
apply(combs, 1, function(i) i)
apply(comb, 1, function(i) i)
lapply(combs, function(comb){
apply(comb, 1, function(i) i)
})
apply(comb, 1, function(i) survival.b[i])
lapply(combs, function(comb){
apply(comb, 1, function(i) survival.b[i])
})
combs.b <- lapply(seq(1, length(survival.b)), function(i) combinations(n=length(survival.b), r=i))
combs.s <- lapply(seq(length(survival.b), 1), function(i) combinations(n=length(survival.b), r=i))
lapply(seq_along(combs), function(j){
c(survival.b[combs.b[[j]][r, ]], survival.s[combs.s[[j]][r, ]])
sapply(seq(1, nrow(combs[[j]]))m function(r){
c(survival.b[combs.b[[j]][r, ]], survival.s[combs.s[[j]][r, ]])
}
})
lapply(seq_along(combs), function(j){
c(survival.b[combs.b[[j]][r, ]], survival.s[combs.s[[j]][r, ]])
sapply(seq(1, nrow(combs[[j]])), function(r){
c(survival.b[combs.b[[j]][r, ]], survival.s[combs.s[[j]][r, ]])
}
})
lapply(seq_along(combs), function(j){
sapply(seq(1, nrow(combs[[j]])), function(r){
c(survival.b[combs.b[[j]][r, ]], survival.s[combs.s[[j]][r, ]])
})
})
setwd("~/Documents/JHU/compstats/Module10")
cos(0)
cos(2 pi)
pi
cos(2 *  pi)
