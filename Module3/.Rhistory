}
return(c(alpha_t=alpha_t, n=n))
}
# We call the function on our dataset
alpha0 <- c(1, 1)
b <- as.matrix(oil[, c('importexport', 'domestic')])
x <- as.matrix(oil[, c('spills')])
solution <- newtons_method(fprime, f2prime, c(1, 1), b, x, tol=.00001)
solution
solution <- fisher_scoring(I, fprime, c(1, 1), b, x, tol=.00001)
# We implement the Fisher scoring update method
I <- function(alpha, b, x){
return(matrix(c(
sum(b[, 1]^2 / (b %*% alpha)),
sum(apply(b, 1, prod) / (b %*% alpha)),
sum(apply(b, 1, prod) / (b %*% alpha)),
sum(b[, 2]^2 / (b %*% alpha))
), ncol=2))
}
fisher_scoring <- function(I, fprime, alpha0, b, x, max_iter=10000, tol=.001){
alpha_t <- alpha0
# Iterate through
for (n in 1:max_iter){
# Set stopping conditions
if(sum((alpha0 - alpha_t)^2) < tol & n > 1){break}
alpha0 <- alpha_t
# Get the Fisher update
alpha_t <- alpha0 + solve(fisher_scoring(alpha0, b, x)) %*% fprime(alpha0, b, x)
}
return(c(alpha_t=alpha_t, n=n))
}
# We call the function on our dataset
alpha0 <- c(1, 1)
b <- as.matrix(oil[, c('importexport', 'domestic')])
x <- as.matrix(oil[, c('spills')])
solution <- fisher_scoring(I, fprime, c(1, 1), b, x, tol=.00001)
solution <- fisher_scoring(I=I, fprime=fprime, alpha0=c(1, 1), b=b, x=x, tol=.00001)
# We call the function on our dataset
alpha0 <- c(1, 1)
b <- as.matrix(oil[, c('importexport', 'domestic')])
x <- as.matrix(oil[, c('spills')])
solution <- fisher_scoring(I=I, fprime=fprime, alpha0=c(1, 1), b=b, x=x, tol=.00001)
fisher_scoring <- function(I, fprime, alpha0, b, x, max_iter=10000, tol=.001){
alpha_t <- alpha0
# Iterate through
for (n in 1:max_iter){
# Set stopping conditions
if(sum((alpha0 - alpha_t)^2) < tol & n > 1){break}
alpha0 <- alpha_t
# Get the Fisher update
alpha_t <- alpha0 + solve(I(alpha0, b, x)) %*% fprime(alpha0, b, x)
}
return(c(alpha_t=alpha_t, n=n))
}
# We call the function on our dataset
alpha0 <- c(1, 1)
b <- as.matrix(oil[, c('importexport', 'domestic')])
x <- as.matrix(oil[, c('spills')])
solution <- fisher_scoring(I=I, fprime=fprime, alpha0=c(1, 1), b=b, x=x, tol=.00001)
solution
diag(4)
steepest_ascent(fprime, c(1, 1), b=b, x=x, tol=.00001)
steepest_ascent <- function(fprime, alpha0, b, x, max_iter=10000, tol=.001){
alpha_t <- alpha0
path <- vector() #record path takem
# Iterate through
for (n in 1:max_iter){
# Set stopping conditions
if(sum((alpha0 - alpha_t)^2) < tol & n > 1){break}
alpha0 <- alpha_t
# Reset the backtrack scaling to 1
backtrack <- 1
# Get the update h
fprime_x <- fprime(alpha0, b, x)
M <- diag(nrow(fprime_x))
h_t <- backtrack * (solve(M) %*% fprime_x)
# While the next point would be negative, backtrack (divide by 2)
while((alpha0 + h_t) < 0){
backtrack <- backtrack / 2
h_t <- backtrack * (solve(M) %*% fprime_x)
}
# Iterate to the next point
alpha_t <- alpha0 + h_t
path <- c(path, alpha0)
}
return(list(path=path, n=n, alpha_t=alpha_t)
}
steepest_ascent <- function(fprime, alpha0, b, x, max_iter=10000, tol=.001){
alpha_t <- alpha0
path <- vector() #record path takem
# Iterate through
for (n in 1:max_iter){
# Set stopping conditions
if(sum((alpha0 - alpha_t)^2) < tol & n > 1){break}
alpha0 <- alpha_t
# Reset the backtrack scaling to 1
backtrack <- 1
# Get the update h
fprime_x <- fprime(alpha0, b, x)
M <- diag(nrow(fprime_x))
h_t <- backtrack * (solve(M) %*% fprime_x)
# While the next point would be negative, backtrack (divide by 2)
while((alpha0 + h_t) < 0){
backtrack <- backtrack / 2
h_t <- backtrack * (solve(M) %*% fprime_x)
}
# Iterate to the next point
alpha_t <- alpha0 + h_t
path <- c(path, alpha0)
}
return(list(path=path, n=n, alpha_t=alpha_t))
}
steepest_ascent(fprime, c(1, 1), b=b, x=x, tol=.00001)
M
log_likelihood <- function(alpha, b, x){
return(sum(x * log(b %*% alpha)) - sum(alpha[1] * b[, 1])
- sum(alpha[2] * b[, 2]) - sum(log(factorial(x))))
}
# we construct agrid of the likelihood function to plot the contours
a1 <- seq(0.1, 2, .01)
a2 <- seq(0.1, 2, .01)
alpha_space <- as.matrix(expand.grid(a1, a2)) # Create cartesian product
# Find the likelihod for all pairs
results <- data.frame(cbind(
alpha_space, apply(
alpha_space, 1,
function(alpha) log_likelihood(alpha, b=b, x=x))))
# Add column names
colnames(results) <- c("alpha1", "alpha2", "likelihood")
# Plot the contours with the solution in red
ggplot(results) +
geom_contour(aes(x=alpha1, y=alpha2, z=likelihood), bins=1000) +
geom_point(aes(x=solution[1], y=solution[2]), colour="green") +
xlab(TeX("$\\alpha_1$")) + ylab(TeX("$\\alpha_2$")) +
ggtitle("Contour Plot of the Likelihood Function") +
labs(caption="Note: The solution using Fisher Scoring is shown in green.")
steepest_ascent <- function(fprime, alpha0, b, x, max_iter=10000, tol=.001){
alpha_t <- alpha0
path <- vector() #record path takem
# Iterate through
for (n in 1:max_iter){
# Set stopping conditions
if(sum((alpha0 - alpha_t)^2) < tol & n > 1){break}
alpha0 <- alpha_t
# Reset the backtrack scaling to 1
backtrack <- 1
# Get the update h
fprime_x <- fprime(alpha0, b, x)
M <<- diag(nrow(fprime_x))
h_t <- backtrack * (solve(M) %*% fprime_x)
# While the next point would be negative, backtrack (divide by 2)
while((alpha0 + h_t) < 0){
backtrack <- backtrack / 2
h_t <- backtrack * (solve(M) %*% fprime_x)
}
# Iterate to the next point
alpha_t <- alpha0 + h_t
path <- c(path, alpha0)
}
return(list(path=path, n=n, alpha_t=alpha_t))
}
steepest_ascent(fprime, c(1, 1), b=b, x=x, tol=.00001)
M
fprime
fprime(c(1,1), b, x)
steepest_ascent <- function(fprime, alpha0, b, x, max_iter=10000, tol=.001){
alpha_t <- alpha0
path <- vector() #record path takem
# Iterate through
for (n in 1:max_iter){
# Set stopping conditions
if(sum((alpha0 - alpha_t)^2) < tol & n > 1){break}
alpha0 <- alpha_t
# Reset the backtrack scaling to 1
backtrack <- 1
# Get the update h
fprime_x <- fprime(alpha0, b, x)
M <<- diag(length(fprime_x))
h_t <- backtrack * (solve(M) %*% fprime_x)
# While the next point would be negative, backtrack (divide by 2)
while((alpha0 + h_t) < 0){
backtrack <- backtrack / 2
h_t <- backtrack * (solve(M) %*% fprime_x)
}
# Iterate to the next point
alpha_t <- alpha0 + h_t
path <- c(path, alpha0)
}
return(list(path=path, n=n, alpha_t=alpha_t))
}
steepest_ascent(fprime, c(1, 1), b=b, x=x, tol=.00001)
log_likelihood()
log_likelihood
steepest_ascent <- function(f, fprime, alpha0, b, x, max_iter=10000, tol=.001){
alpha_t <- alpha0
path <- vector() #record path takem
# Iterate through
for (n in 1:max_iter){
# Set stopping conditions
if(sum((alpha0 - alpha_t)^2) < tol & n > 1){break}
alpha0 <- alpha_t
# Reset the backtrack scaling to 1
backtrack <- 1
# Get the update h
fprime_x <- fprime(alpha0, b, x)
M <<- diag(length(fprime_x))
h_t <- backtrack * (solve(M) %*% fprime_x)
# While the next point would be negative, backtrack (divide by 2)
while(f(alpha0 + h_t) < f(alpha0)){
backtrack <- backtrack / 2
h_t <- backtrack * (solve(M) %*% fprime_x)
}
# Iterate to the next point
alpha_t <- alpha0 + h_t
path <- c(path, alpha0)
}
return(list(path=path, n=n, alpha_t=alpha_t))
}
steepest_ascent(fprime, c(1, 1), b=b, x=x, tol=.00001)
steepest_ascent <- function(f, fprime, alpha0, b, x, max_iter=10000, tol=.001){
alpha_t <- alpha0
path <- vector() #record path takem
# Iterate through
for (n in 1:max_iter){
# Set stopping conditions
if(sum((alpha0 - alpha_t)^2) < tol & n > 1){break}
alpha0 <- alpha_t
# Reset the backtrack scaling to 1
backtrack <- 1
# Get the update h
fprime_x <- fprime(alpha0, b, x)
M <<- diag(length(fprime_x))
h_t <- backtrack * (solve(M) %*% fprime_x)
# While the next point would be negative, backtrack (divide by 2)
while(f(alpha0 + h_t) < f(alpha0)){
backtrack <- backtrack / 2
h_t <- backtrack * (solve(M) %*% fprime_x)
}
# Iterate to the next point
alpha_t <- alpha0 + h_t
path <- c(path, alpha0)
}
return(list(path=path, n=n, alpha_t=alpha_t))
}
steepest_ascent(log_likelihood, fprime, c(1, 1), b=b, x=x, tol=.00001)
log_likelihood()
log_likelihood
steepest_ascent <- function(f, fprime, alpha0, b, x, max_iter=10000, tol=.001){
alpha_t <- alpha0
path <- vector() #record path takem
# Iterate through
for (n in 1:max_iter){
# Set stopping conditions
if(sum((alpha0 - alpha_t)^2) < tol & n > 1){break}
alpha0 <- alpha_t
# Reset the backtrack scaling to 1
backtrack <- 1
# Get the update h
fprime_x <- fprime(alpha0, b, x)
M <<- diag(length(fprime_x))
h_t <- backtrack * (solve(M) %*% fprime_x)
# While the next point would be negative, backtrack (divide by 2)
while(f(alpha0 + h_t, b, x) < f(alpha0, b, x)){
backtrack <- backtrack / 2
h_t <- backtrack * (solve(M) %*% fprime_x)
}
# Iterate to the next point
alpha_t <- alpha0 + h_t
path <- c(path, alpha0)
}
return(list(path=path, n=n, alpha_t=alpha_t))
}
steepest_ascent(log_likelihood, fprime, c(1, 1), b=b, x=x, tol=.00001)
steepest_ascent(log_likelihood, fprime, c(1, 1), b=b, x=x, tol=.0000001)
steepest_ascent <- function(f, fprime, alpha0, b, x, max_iter=10000, tol=.001){
alpha_t <- alpha0
path <- vector() #record path takem
# Iterate through
for (n in 1:max_iter){
# Set stopping conditions
if(sum((alpha0 - alpha_t)^2) < tol & n > 1){break}
alpha0 <- alpha_t
# Reset the backtrack scaling to 1
backtrack <- 1
# Get the update h
fprime_x <- fprime(alpha0, b, x)
M <<- diag(length(fprime_x))
h_t <- backtrack * (solve(M) %*% fprime_x)
# While the next point would be negative, backtrack (divide by 2)
while(f(alpha0 + h_t, b, x) < f(alpha0, b, x)){
backtrack <- backtrack / 2
h_t <- backtrack * (solve(M) %*% fprime_x)
}
# Iterate to the next point
alpha_t <- alpha0 + h_t
path <- c(path, alpha0)
}
return(list(path=path, n=n, alpha_t=alpha_t))
}
steepest_ascent(log_likelihood, fprime, c(1, 1), b=b, x=x, tol=.001)
steepest_ascent(log_likelihood, fprime, c(1, 1), b=b, x=x, tol=.00001)
steepest_ascent(log_likelihood, fprime, c(1, 1), b=b, x=x, tol=.00001)
matrix(ncol=2)
matrix(ncol=2, nrow=0)
steepest_ascent <- function(f, fprime, alpha0, b, x, max_iter=10000, tol=.001){
alpha_t <- alpha0
path <- matrix(ncol=length(alpha0), nrow=0)
# Iterate through
for (n in 1:max_iter){
# Set stopping conditions
if(sum((alpha0 - alpha_t)^2) < tol & n > 1){break}
alpha0 <- alpha_t
# Reset the backtrack scaling to 1
backtrack <- 1
# Get the update h
fprime_x <- fprime(alpha0, b, x)
M <<- diag(length(fprime_x))
h_t <- backtrack * (solve(M) %*% fprime_x)
# While the next point would be negative, backtrack (divide by 2)
while(f(alpha0 + h_t, b, x) < f(alpha0, b, x)){
backtrack <- backtrack / 2
h_t <- backtrack * (solve(M) %*% fprime_x)
}
# Iterate to the next point
alpha_t <- alpha0 + h_t
path <- rbind(path, alpha0)
}
return(list(path=path, n=n, alpha_t=alpha_t))
}
solutions <- steepest_ascent(log_likelihood, fprime, c(1, 1), b=b, x=x, tol=.00001)
steepest_ascent <- function(f, fprime, alpha0, b, x, max_iter=10000, tol=.001){
alpha_t <- alpha0
path <- matrix(ncol=length(alpha0), nrow=0)
# Iterate through
for (n in 1:max_iter){
# Set stopping conditions
if(sum((alpha0 - alpha_t)^2) < tol & n > 1){break}
alpha0 <<- alpha_t
# Reset the backtrack scaling to 1
backtrack <- 1
# Get the update h
fprime_x <- fprime(alpha0, b, x)
M <- diag(length(fprime_x))
h_t <- backtrack * (solve(M) %*% fprime_x)
# While the next point would be negative, backtrack (divide by 2)
while(f(alpha0 + h_t, b, x) < f(alpha0, b, x)){
backtrack <- backtrack / 2
h_t <- backtrack * (solve(M) %*% fprime_x)
}
# Iterate to the next point
alpha_t <- alpha0 + h_t
path <- rbind(path, alpha0)
}
return(list(path=path, n=n, alpha_t=alpha_t))
}
solutions <- steepest_ascent(log_likelihood, fprime, c(1, 1), b=b, x=x, tol=.00001)
alpha0
solutions
steepest_ascent <- function(f, fprime, alpha0, b, x, max_iter=10000, tol=.001){
alpha_t <- alpha0
path <- matrix(ncol=length(alpha0), nrow=0)
# Iterate through
for (n in 1:max_iter){
# Set stopping conditions
if(sum((alpha0 - alpha_t)^2) < tol & n > 1){break}
alpha0 <<- alpha_t
# Reset the backtrack scaling to 1
backtrack <- 1
# Get the update h
fprime_x <- fprime(alpha0, b, x)
M <- diag(length(fprime_x))
h_t <- backtrack * (solve(M) %*% fprime_x)
# While the next point would be negative, backtrack (divide by 2)
while(f(alpha0 + h_t, b, x) < f(alpha0, b, x)){
backtrack <- backtrack / 2
h_t <- backtrack * (solve(M) %*% fprime_x)
}
# Iterate to the next point
alpha_t <- alpha0 + h_t
path <- rbind(path, t(alpha0))
}
return(list(path=path, n=n, alpha_t=alpha_t))
}
solutions <- steepest_ascent(log_likelihood, fprime, c(1, 1), b=b, x=x, tol=.00001)
solutions
steepest_ascent <- function(f, fprime, alpha0, b, x, max_iter=10000, tol=.001){
alpha_t <- alpha0
path <- matrix(ncol=length(alpha0), nrow=0)
# Iterate through
for (n in 1:max_iter){
# Set stopping conditions
if(sum((alpha0 - alpha_t)^2) < tol & n > 1){break}
alpha0 <- alpha_t
# Reset the backtrack scaling to 1
backtrack <- 1
# Get the update h
fprime_x <- fprime(alpha0, b, x)
M <- diag(length(fprime_x))
h_t <- backtrack * (solve(M) %*% fprime_x)
# While the next point would be negative, backtrack (divide by 2)
while(f(alpha0 + h_t, b, x) < f(alpha0, b, x)){
backtrack <- backtrack / 2
h_t <- backtrack * (solve(M) %*% fprime_x)
}
# Iterate to the next point
alpha_t <- alpha0 + h_t
path <- rbind(path, t(alpha0))
}
return(list(path=path, n=n, alpha_t=alpha_t))
}
solutions <- steepest_ascent(log_likelihood, fprime, c(1, 1), b=b, x=x, tol=.00001)
path
solution
solutions
# we construct agrid of the likelihood function to plot the contours
a1 <- seq(0.1, 2, .01)
a2 <- seq(0.1, 2, .01)
alpha_space <- as.matrix(expand.grid(a1, a2)) # Create cartesian product
# Find the likelihod for all pairs
results <- data.frame(cbind(
alpha_space, apply(
alpha_space, 1,
function(alpha) log_likelihood(alpha, b=b, x=x))))
# Add column names
colnames(results) <- c("alpha1", "alpha2", "likelihood")
# Plot the contours with the solution in red
ggplot(results) +
geom_contour(aes(x=alpha1, y=alpha2, z=likelihood), bins=1000) +
geom_point(aes(x=solutions$alpha_t[1], y=solutions$alpha_t[2]), colour="purple") +
geom_path(aes(x=solutions$path[, 1], y=solutions$path[, 2], col='purple')) +
xlab(TeX("$\\alpha_1$")) + ylab(TeX("$\\alpha_2$")) +
ggtitle("Contour Plot of the Likelihood Function") +
labs(caption="Note: The solution using steepest ascent is shown in purple, with the path taken to get there.")
solutions$path
solutions$path[, 1]
# we construct agrid of the likelihood function to plot the contours
a1 <- seq(0.1, 2, .01)
a2 <- seq(0.1, 2, .01)
alpha_space <- as.matrix(expand.grid(a1, a2)) # Create cartesian product
# Find the likelihod for all pairs
results <- data.frame(cbind(
alpha_space, apply(
alpha_space, 1,
function(alpha) log_likelihood(alpha, b=b, x=x))))
# Add column names
colnames(results) <- c("alpha1", "alpha2", "likelihood")
# Plot the contours with the solution in red
ggplot(results) +
geom_contour(aes(x=alpha1, y=alpha2, z=likelihood), bins=1000) +
geom_point(aes(x=solutions$alpha_t[1], y=solutions$alpha_t[2]), colour="purple") +
geom_path(aes(x=solutions$path[, 1], y=solutions$path[, 2], colour='purple')) +
xlab(TeX("$\\alpha_1$")) + ylab(TeX("$\\alpha_2$")) +
ggtitle("Contour Plot of the Likelihood Function") +
labs(caption="Note: The solution using steepest ascent is shown in purple, with the path taken to get there.")
data.frame(solutions$path)
# we construct agrid of the likelihood function to plot the contours
a1 <- seq(0.1, 2, .01)
a2 <- seq(0.1, 2, .01)
alpha_space <- as.matrix(expand.grid(a1, a2)) # Create cartesian product
# Find the likelihod for all pairs
results <- data.frame(cbind(
alpha_space, apply(
alpha_space, 1,
function(alpha) log_likelihood(alpha, b=b, x=x))))
# Add column names
colnames(results) <- c("alpha1", "alpha2", "likelihood")
# Plot the contours with the solution in red
ggplot(results) +
geom_contour(aes(x=alpha1, y=alpha2, z=likelihood), bins=1000) +
geom_point(aes(x=solutions$alpha_t[1], y=solutions$alpha_t[2]), colour="purple") +
geom_path(data=data.frame(solutions$path), aes(x=X1, y=X2, colour='purple')) +
xlab(TeX("$\\alpha_1$")) + ylab(TeX("$\\alpha_2$")) +
ggtitle("Contour Plot of the Likelihood Function") +
labs(caption="Note: The solution using steepest ascent is shown in purple, with the path taken to get there.")
# we construct agrid of the likelihood function to plot the contours
a1 <- seq(0.1, 2, .01)
a2 <- seq(0.1, 2, .01)
alpha_space <- as.matrix(expand.grid(a1, a2)) # Create cartesian product
# Find the likelihod for all pairs
results <- data.frame(cbind(
alpha_space, apply(
alpha_space, 1,
function(alpha) log_likelihood(alpha, b=b, x=x))))
# Add column names
colnames(results) <- c("alpha1", "alpha2", "likelihood")
# Plot the contours with the solution in red
ggplot(results) +
geom_contour(aes(x=alpha1, y=alpha2, z=likelihood), bins=1000) +
geom_point(aes(x=solutions$alpha_t[1], y=solutions$alpha_t[2]), colour="purple") +
geom_path(data=data.frame(solutions$path), aes(x=X1, y=X2, col='purple')) +
xlab(TeX("$\\alpha_1$")) + ylab(TeX("$\\alpha_2$")) +
ggtitle("Contour Plot of the Likelihood Function") +
labs(caption="Note: The solution using steepest ascent is shown in purple, with the path taken to get there.")
# we construct agrid of the likelihood function to plot the contours
a1 <- seq(0.1, 2, .01)
a2 <- seq(0.1, 2, .01)
alpha_space <- as.matrix(expand.grid(a1, a2)) # Create cartesian product
# Find the likelihod for all pairs
results <- data.frame(cbind(
alpha_space, apply(
alpha_space, 1,
function(alpha) log_likelihood(alpha, b=b, x=x))))
# Add column names
colnames(results) <- c("alpha1", "alpha2", "likelihood")
# Plot the contours with the solution in red
ggplot(results) +
geom_contour(aes(x=alpha1, y=alpha2, z=likelihood), bins=1000) +
geom_point(aes(x=solutions$alpha_t[1], y=solutions$alpha_t[2]), colour="purple") +
geom_path(data=data.frame(solutions$path), aes(x=X1, y=X2)) +
xlab(TeX("$\\alpha_1$")) + ylab(TeX("$\\alpha_2$")) +
ggtitle("Contour Plot of the Likelihood Function") +
labs(caption="Note: The solution using steepest ascent is shown in purple, with the path taken to get there.")
