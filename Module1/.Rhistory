setwd("~/Documents/JHU/compstats/Module1")
read.table('./data/favorite.data')
mean(data)
# Problem 1.
data <- read.table('./data/favorite.data', colClasses = c('numeric'))
mean(data)
data
data[0,0]
data[1, 1]
tail(data)
class(data)
data[, 1]
mean(data[, 1])
summary(data)
hist(data[, 1])
hist(data[, 1], main='Histogram of `favorite.data`')
hist(data[, 1], main='Histogram of favorite.data')
hist(data[, 1], main='Histogram of favorite.data', xlab='data')
hist(data[, 1], main='Histogram of favorite.data', xlab='Value')
print("The mean is ", mean(data[, 1]))
print("The median is ", median(data[, 1]))
print("The standard deviation is ", sd(data[, 1]))
print("The max is", max(data[, 1]))
print("The min is", min(data[, 1]))
hist(data[, 1], main='Histogram of favorite.data', xlab='Value')
# Problem 1.
data <- read.table('./data/favorite.data', colClasses = c('numeric'))[, 1]
print("The mean is ", mean(data))
print("The median is ", median(data))
print("The standard deviation is ", sd(data))
print("The max is", max(data))
print("The min is", min(data))
hist(data, main='Histogram of favorite.data', xlab='Value')
print(paste("The min is", min(data)))
# Problem 1.
data <- read.table('./data/favorite.data', colClasses = c('numeric'))[, 1]
print(paste0("The mean is ", mean(data)))
print(paste0("The median is ", median(data)))
print(paste0("The standard deviation is ", sd(data)))
print(paste0("The max is", max(data)))
print(paste("The min is", min(data)))
hist(data, main='Histogram of favorite.data', xlab='Value')
# Problem 1.
data <- read.table('./data/favorite.data', colClasses = c('numeric'))[, 1]
print(paste0("The mean is ", mean(data)))
print(paste0("The median is ", median(data)))
print(paste0("The standard deviation is ", sd(data)))
print(paste0("The max is", max(data)))
print(paste("The min is", min(data)))
pdf("problem1_histogram.pdf", paper = 'a4r')
hist(data, main='Histogram of favorite.data', xlab='Value')
dev.off()
dev.off()
?pdf
hist(data, main='Histogram of favorite.data', xlab='Value')
print(summary(normal_data))
## Problem 2.
# Generate 10,000 standard normal data points
normal_data <- rnorm(n=10000, mean=0, sd=1)
## Problem 2.
set.seed(73) # set a seed for reproducibility
# Generate 10,000 standard normal data points
normal_data <- rnorm(n=10000, mean=0, sd=1)
# Generate the histogram of values
# a)
pdf("problem2_histogram.pdf", height=8.5, width=14)
hist(normal_data, main='Histogram of Standard Normal Data', xlab='Value')
dev.off()
print(summary(normal_data))
as.character(max)
as.character(quote(max))
# b)
lapply(list(mean, median, sd), function(f){
print(paste(as.character(quote(f)), f(normal_data)))
})
print(paste(as.character(quote(do.call(f))), f(normal_data)))
# b)
lapply(list(mean, median, sd), function(f){
print(paste(as.character(quote(do.call(f))), f(normal_data)))
})
# b)
lapply(list(mean, median, sd), function(f){
print(paste(as.character(f), f(normal_data)))
})
# b)
lapply(list(mean, median, sd), function(f){
print(paste(deparse(substitute(f)), f(normal_data)))
})
# b)
lapply(list("mean", "median", "sd"), function(f){
}
)
paste(f, do.call(f, normal_data), sep=": ")
# b)
lapply(list("mean", "median", "sd"), function(f){
paste(f, do.call(f, normal_data), sep=": ")
})
do.call()
?do.call()
# b)
lapply(list("mean", "median", "sd"), function(f){
paste(f, do.call(f, list(normal_data)), sep=": ")
})
# b)
sapply(list("mean", "median", "sd"), function(f){
paste(f, do.call(f, list(normal_data)), sep=": ")
})
# b)
print(sapply(list("mean", "median", "sd"), function(f){
paste(f, do.call(f, list(normal_data)), sep=": ")
}))
# b)
print(sapply(list("mean", "median", "sd"), function(f){
paste(f, round(do.call(f, list(normal_data)), 2), sep=": ")
}))
paste(f, round(do.call(f, list(normal_data)), 5), sep=": ")
# b)
print(sapply(list("mean", "median", "sd"), function(f){
paste(f, round(do.call(f, list(normal_data)), 5), sep=": ")
}))
## Problem 3.
a <- seq(5, 160, 5)
a
## Problem 3.
a <- seq(5, 160, 5)
b <- seq(87, 56, -1)
b
d <- a * b
d
# a
print(sapply(list(15, 16, 17), function(i){
print(paste0("The ", i, "th element of d is ", d[i]))
}))
# a
print(sapply(list(15, 16, 17), function(i){
print(paste0("The ", i, "th element of d is ", d[i]))
}))
paste0("The ", i, "th element of d is ", d[i])
# a
print(sapply(list(15, 16, 17), function(i){
paste0("The ", i, "th element of d is ", d[i])
}))
# b)
d[d > 2000]
# b)
seq(1, length(d))d > 2000]
# b)
seq(1, length(d))[d > 2000]
# c)
# We find the number of elements that are greater than 6000
sum(d > 6000)
# c)
# We find the number of elements that are greater than 6000
print(paste(sum(d > 6000), "elements of d are greater than 6000"))
mod()
%
.4234 %% 1
add_perfect_squares(10)
## Problem 4
# a)
add_perfect_squares <- function(x){
return(sum(sapply(seq(1, x), function(z){
if (sqrt(z) %% 1 == 0){
return(z)
}
})))
}
add_perfect_squares(10)
## Problem 4
# a)
add_perfect_squares <- function(x){
return(sum(sapply(list(seq(1, x)), function(z){
if (sqrt(z) %% 1 == 0){
return(z)
}
})))
}
add_perfect_squares(10)
list(seq(1, 0))
## Problem 4
# a)
add_perfect_squares <- function(x){
return(sum(vapply(seq(1, x), function(z){
if (sqrt(z) %% 1 == 0){
return(z)
}
})))
}
add_perfect_squares(10)
?vapply
## Problem 4
# a)
add_perfect_squares <- function(x){
return(sum(sapply(seq(1, x), function(z){
if (sqrt(z) %% 1 == 0){
return(z)
}
})))
}
add_perfect_squares(10)
## Problem 4
# a)
add_perfect_squares <- function(x){
return(sapply(seq(1, x), function(z){
if (sqrt(z) %% 1 == 0){
return(z)
}
}))
}
add_perfect_squares(10)
return(vapply(seq(1, x), function(z){
if (sqrt(z) %% 1 == 0){
return(z)
}
}))
## Problem 4
# a)
add_perfect_squares <- function(x){
return(sapply(seq(1, x), function(z){
if (sqrt(z) %% 1 == 0){
return(z)
}
}), simplify=TRUE)
}
add_perfect_squares(10)
return(sapply(seq(1, x), function(z){
if (sqrt(z) %% 1 == 0){
return(z)
}
}, simplify=TRUE))
## Problem 4
# a)
add_perfect_squares <- function(x){
return(sapply(seq(1, x), function(z){
if (sqrt(z) %% 1 == 0){
return(z)
}
}, simplify=TRUE))
}
add_perfect_squares(10)
## Problem 4
# a)
add_perfect_squares <- function(x){
return(lapply(seq(1, x), function(z){
if (sqrt(z) %% 1 == 0){
return(z)
}
}, simplify=TRUE))
}
add_perfect_squares(10)
add_perfect_squares <- function(x){
perfect_squares <- vector()
for (z in seq(1, x)){
if (sqrt(z) %% 1 == 0){
perfect_squares <- c(perfect_squares, z)
}
}
return(perfect_squares)
}
add_perfect_squares(10)
## Problem 4
# a)
add_perfect_squares <- function(x){
perfect_squares <- 0
# Loop through all elements between 1 and x
for (z in seq(1, x)){
# If x is a perfect square
if (sqrt(z) %% 1 == 0){
# add it to the vector
perfect_squares <- perfect_squares + z
}
}
return(sum(perfect_squares))
}
add_perfect_squares(10)
add_perfect_squares(100)
add_perfect_squares(100000)
# a)
print("The sum of all perfect squares between 1 and: ")
print(paste(100, add_perfect_squares(100), sep=": "))
print(paste(100000, add_perfect_squares(100000), sep=": "))
z <- c()
z <- c(1, z)
z <- c(1, z)
z
get_perfect_squares <- function(x){
perfect_squares <- c()
z <- 1
while (z ^ 2 <= x){
perfect_squares <- c(perfect_squares, z)
z += 1
}
return(perfect_squares)
}
# a)
get_perfect_squares <- function(x){
perfect_squares <- c()
z <- 1
while (z ^ 2 <= x){
perfect_squares <- c(perfect_squares, z)
z <- z + 1
}
return(perfect_squares)
}
get_perfect_squares(10)
get_perfect_squares <- function(x){
perfect_squares <- c()
z <- 1
while (z ^ 2 <= x){
perfect_squares <- c(perfect_squares, z ^ 2)
z <- z + 1
}
return(perfect_squares)
}
get_perfect_squares(10)
get_perfect_squares(16)
get_perfect_squares(25)
get_perfect_squares(100)
get_perfect_squares <- function(x){
perfect_squares <- c()
z <- 1
while (z ^ 2 <= x){
perfect_squares <- c(perfect_squares, z ^ 2)
z <- z + 1
}
return(perfect_squares)
}
add_perfect_squares <- function(x){
perfect_squares <- get_perfect_squares(x)
return(sum(perfect_squares))
}
add_perfect_squares(10)
add_perfect_squares(100)
# Problem 5
# a)
get_perfect_squares(500)
# b)
matrix_1_to_100000 <- matrix(get_perfect_squares(100000), ncol=4)
matrix_1_to_100000
99856 ^ .5
# c)
print(matrix_1_to_100000[15, 3])
pi
# Problem 6
x <- seq(-1 * pi, pi, length.out = 50)
x
y1 <- sin(x)
y1
y2 <- cos(x)
y2
# a)
plot(x, y1)
# a)
plot(x, y1)
# b)
prot(x, y2, 'l')
# b)
plot(x, y2, 'l')
# c)
?abline()
# c)
abline(a=1, b=-1 * (1 / 3))
install.packages("xtable")
library(xtable)
# Problem 5
# a)
vector_1_to_500 <- get_perfect_squares(500)
xtable(vector_1_to_500)
xtable(matrix_1_to_100000)
vector_1_to_500
print(xtable(matrix(vector_1_to_500)))
